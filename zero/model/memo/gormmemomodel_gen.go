// Code generated by goctl. DO NOT EDIT.

package memo

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gormMemoFieldNames          = builder.RawFieldNames(&GormMemo{})
	gormMemoRows                = strings.Join(gormMemoFieldNames, ",")
	gormMemoRowsExpectAutoSet   = strings.Join(stringx.Remove(gormMemoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gormMemoRowsWithPlaceHolder = strings.Join(stringx.Remove(gormMemoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	gormMemoModel interface {
		Insert(ctx context.Context, data *GormMemo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GormMemo, error)
		Update(ctx context.Context, data *GormMemo) error
		Delete(ctx context.Context, id int64) error
		Find(ctx context.Context) ([]*GormMemo, error)
	}

	defaultGormMemoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GormMemo struct {
		Id        int64         `db:"id"`
		Content   string        `db:"content"`
		CreatedAt sql.NullInt64 `db:"created_at"`
		UpdatedAt sql.NullInt64 `db:"updated_at"`
		DeletedAt sql.NullInt64 `db:"deleted_at"`
	}
)

func newGormMemoModel(conn sqlx.SqlConn) *defaultGormMemoModel {
	return &defaultGormMemoModel{
		conn:  conn,
		table: "`gorm_memo`",
	}
}

func (m *defaultGormMemoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGormMemoModel) FindOne(ctx context.Context, id int64) (*GormMemo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gormMemoRows, m.table)
	var resp GormMemo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGormMemoModel) Insert(ctx context.Context, data *GormMemo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, gormMemoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Content, data.DeletedAt)
	return ret, err
}

func (m *defaultGormMemoModel) Update(ctx context.Context, data *GormMemo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gormMemoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Content, data.DeletedAt, data.Id)
	return err
}


func (m *defaultGormMemoModel) Find(ctx context.Context) ([]*GormMemo, error) {
	query := fmt.Sprintf("select %s from %s where `deleted_at` = 0 limit 100", gormMemoRows, m.table)
	var resp []*GormMemo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}



func (m *defaultGormMemoModel) tableName() string {
	return m.table
}
