// Code generated by goctl. DO NOT EDIT.

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gormUserFieldNames          = builder.RawFieldNames(&GormUser{})
	gormUserRows                = strings.Join(gormUserFieldNames, ",")
	gormUserRowsExpectAutoSet   = strings.Join(stringx.Remove(gormUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gormUserRowsWithPlaceHolder = strings.Join(stringx.Remove(gormUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	gormUserModel interface {
		Insert(ctx context.Context, data *GormUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GormUser, error)
		FindOneByNameDeletedAt(ctx context.Context, name string, deletedAt sql.NullInt64) (*GormUser, error)
		Update(ctx context.Context, data *GormUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGormUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GormUser struct {
		Id        int64         `db:"id"`
		Name      string        `db:"name"`
		Password  string        `db:"password"`
		CreatedAt sql.NullInt64 `db:"created_at"`
		UpdatedAt sql.NullInt64 `db:"updated_at"`
		DeletedAt sql.NullInt64 `db:"deleted_at"`
	}
)

func newGormUserModel(conn sqlx.SqlConn) *defaultGormUserModel {
	return &defaultGormUserModel{
		conn:  conn,
		table: "`gorm_user`",
	}
}

func (m *defaultGormUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGormUserModel) FindOne(ctx context.Context, id int64) (*GormUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gormUserRows, m.table)
	var resp GormUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGormUserModel) FindOneByNameDeletedAt(ctx context.Context, name string, deletedAt sql.NullInt64) (*GormUser, error) {
	var resp GormUser
	query := fmt.Sprintf("select %s from %s where `name` = ? and `deleted_at` = ? limit 1", gormUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name, deletedAt)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGormUserModel) Insert(ctx context.Context, data *GormUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, gormUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Password, data.DeletedAt)
	return ret, err
}

func (m *defaultGormUserModel) Update(ctx context.Context, newData *GormUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gormUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Password, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultGormUserModel) tableName() string {
	return m.table
}
